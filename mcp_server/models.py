# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:06:46+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AmazonResourceName(RootModel[constr(min_length=1, max_length=1011)]):
    root: constr(min_length=1, max_length=1011)


class BatchLoadDataFormat(Enum):
    CSV = 'CSV'


class BatchLoadStatus(Enum):
    CREATED = 'CREATED'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'
    PROGRESS_STOPPED = 'PROGRESS_STOPPED'
    PENDING_RESUME = 'PENDING_RESUME'


class BatchLoadTaskId(
    RootModel[constr(pattern=r'[A-Z0-9]+', min_length=3, max_length=32)]
):
    root: constr(pattern=r'[A-Z0-9]+', min_length=3, max_length=32)


class Boolean(RootModel[bool]):
    root: bool


class ClientRequestToken(RootModel[SecretStr]):
    root: SecretStr


class ConflictException(RootModel[Any]):
    root: Any


class CreateBatchLoadTaskResponse(BaseModel):
    TaskId: BatchLoadTaskId


class Date(RootModel[datetime]):
    root: datetime


class DescribeBatchLoadTaskRequest(BaseModel):
    TaskId: BatchLoadTaskId


class DescribeEndpointsRequest(BaseModel):
    pass


class DimensionValueType(Enum):
    VARCHAR = 'VARCHAR'


class Integer(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class InvalidEndpointException(RootModel[Any]):
    root: Any


class ListTagsForResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName


class Long(RootModel[int]):
    root: int


class MagneticStoreRetentionPeriodInDays(RootModel[conint(ge=1, le=73000)]):
    root: conint(ge=1, le=73000)


class MeasureValueType(Enum):
    DOUBLE = 'DOUBLE'
    BIGINT = 'BIGINT'
    VARCHAR = 'VARCHAR'
    BOOLEAN = 'BOOLEAN'
    TIMESTAMP = 'TIMESTAMP'
    MULTI = 'MULTI'


class MemoryStoreRetentionPeriodInHours(RootModel[conint(ge=1, le=8766)]):
    root: conint(ge=1, le=8766)


class PageLimit(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class PaginationLimit(RootModel[conint(ge=1, le=20)]):
    root: conint(ge=1, le=20)


class RecordVersion(RootModel[int]):
    root: int


class RecordsIngested(BaseModel):
    MagneticStore: Optional[Integer] = None
    MemoryStore: Optional[Integer] = None
    Total: Optional[Integer] = None


class RejectedRecordsException(RootModel[Any]):
    root: Any


class ResourceCreateAPIName(RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+')]):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+')


class ResourceName(RootModel[str]):
    root: str


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResumeBatchLoadTaskRequest(BaseModel):
    TaskId: BatchLoadTaskId


class ResumeBatchLoadTaskResponse(BaseModel):
    pass


class RetentionProperties(BaseModel):
    MagneticStoreRetentionPeriodInDays_1: MagneticStoreRetentionPeriodInDays = Field(
        ..., alias='MagneticStoreRetentionPeriodInDays'
    )
    MemoryStoreRetentionPeriodInHours_1: MemoryStoreRetentionPeriodInHours = Field(
        ..., alias='MemoryStoreRetentionPeriodInHours'
    )


class S3BucketName(
    RootModel[
        constr(
            pattern=r'[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]', min_length=3, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]', min_length=3, max_length=63
    )


class S3EncryptionOption(Enum):
    SSE_S3 = 'SSE_S3'
    SSE_KMS = 'SSE_KMS'


class S3ObjectKey(
    RootModel[
        constr(
            pattern=r'[a-zA-Z0-9|!\-_*\'\(\)]([a-zA-Z0-9]|[!\-_*\'\(\)\/.])+',
            min_length=1,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9|!\-_*\'\(\)]([a-zA-Z0-9]|[!\-_*\'\(\)\/.])+',
        min_length=1,
        max_length=1024,
    )


class S3ObjectKeyPrefix(
    RootModel[
        constr(
            pattern=r'[a-zA-Z0-9|!\-_*\'\(\)]([a-zA-Z0-9]|[!\-_*\'\(\)\/.])+',
            min_length=1,
            max_length=928,
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9|!\-_*\'\(\)]([a-zA-Z0-9]|[!\-_*\'\(\)\/.])+',
        min_length=1,
        max_length=928,
    )


class ScalarMeasureValueType(Enum):
    DOUBLE = 'DOUBLE'
    BIGINT = 'BIGINT'
    BOOLEAN = 'BOOLEAN'
    VARCHAR = 'VARCHAR'
    TIMESTAMP = 'TIMESTAMP'


class SchemaName(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class SchemaValue(RootModel[str]):
    root: str


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class String(RootModel[str]):
    root: str


class StringValue1(RootModel[constr(min_length=1, max_length=1)]):
    root: constr(min_length=1, max_length=1)


class StringValue2048(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class StringValue256(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class TableStatus(Enum):
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    RESTORING = 'RESTORING'


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class ThrottlingException(RootModel[Any]):
    root: Any


class TimeUnit(Enum):
    MILLISECONDS = 'MILLISECONDS'
    SECONDS = 'SECONDS'
    MICROSECONDS = 'MICROSECONDS'
    NANOSECONDS = 'NANOSECONDS'


class UntagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateDatabaseRequest(BaseModel):
    DatabaseName: ResourceName
    KmsKeyId: StringValue2048


class ValidationException(RootModel[Any]):
    root: Any


class WriteRecordsResponse(BaseModel):
    RecordsIngested_1: Optional[RecordsIngested] = Field(None, alias='RecordsIngested')


class XAmzTarget(Enum):
    Timestream_20181101_CreateBatchLoadTask = 'Timestream_20181101.CreateBatchLoadTask'


class XAmzTarget1(Enum):
    Timestream_20181101_CreateDatabase = 'Timestream_20181101.CreateDatabase'


class XAmzTarget2(Enum):
    Timestream_20181101_CreateTable = 'Timestream_20181101.CreateTable'


class XAmzTarget3(Enum):
    Timestream_20181101_DeleteDatabase = 'Timestream_20181101.DeleteDatabase'


class XAmzTarget4(Enum):
    Timestream_20181101_DeleteTable = 'Timestream_20181101.DeleteTable'


class XAmzTarget5(Enum):
    Timestream_20181101_DescribeBatchLoadTask = (
        'Timestream_20181101.DescribeBatchLoadTask'
    )


class XAmzTarget6(Enum):
    Timestream_20181101_DescribeDatabase = 'Timestream_20181101.DescribeDatabase'


class XAmzTarget7(Enum):
    Timestream_20181101_DescribeEndpoints = 'Timestream_20181101.DescribeEndpoints'


class XAmzTarget8(Enum):
    Timestream_20181101_DescribeTable = 'Timestream_20181101.DescribeTable'


class XAmzTarget9(Enum):
    Timestream_20181101_ListBatchLoadTasks = 'Timestream_20181101.ListBatchLoadTasks'


class XAmzTarget10(Enum):
    Timestream_20181101_ListDatabases = 'Timestream_20181101.ListDatabases'


class XAmzTarget11(Enum):
    Timestream_20181101_ListTables = 'Timestream_20181101.ListTables'


class XAmzTarget12(Enum):
    Timestream_20181101_ListTagsForResource = 'Timestream_20181101.ListTagsForResource'


class XAmzTarget13(Enum):
    Timestream_20181101_ResumeBatchLoadTask = 'Timestream_20181101.ResumeBatchLoadTask'


class XAmzTarget14(Enum):
    Timestream_20181101_TagResource = 'Timestream_20181101.TagResource'


class XAmzTarget15(Enum):
    Timestream_20181101_UntagResource = 'Timestream_20181101.UntagResource'


class XAmzTarget16(Enum):
    Timestream_20181101_UpdateDatabase = 'Timestream_20181101.UpdateDatabase'


class XAmzTarget17(Enum):
    Timestream_20181101_UpdateTable = 'Timestream_20181101.UpdateTable'


class XAmzTarget18(Enum):
    Timestream_20181101_WriteRecords = 'Timestream_20181101.WriteRecords'


class BatchLoadProgressReport(BaseModel):
    BytesMetered: Optional[Long] = None
    FileFailures: Optional[Long] = None
    ParseFailures: Optional[Long] = None
    RecordIngestionFailures: Optional[Long] = None
    RecordsIngested: Optional[Long] = None
    RecordsProcessed: Optional[Long] = None


class BatchLoadTask(BaseModel):
    CreationTime: Optional[Date] = None
    DatabaseName: Optional[ResourceName] = None
    LastUpdatedTime: Optional[Date] = None
    ResumableUntil: Optional[Date] = None
    TableName: Optional[ResourceName] = None
    TaskId: Optional[BatchLoadTaskId] = None
    TaskStatus: Optional[BatchLoadStatus] = None


class BatchLoadTaskList(RootModel[List[BatchLoadTask]]):
    root: List[BatchLoadTask]


class CsvConfiguration(BaseModel):
    ColumnSeparator: Optional[StringValue1] = None
    EscapeChar: Optional[StringValue1] = None
    NullValue: Optional[StringValue256] = None
    QuoteChar: Optional[StringValue1] = None
    TrimWhiteSpace: Optional[Boolean] = None


class DataModelS3Configuration(BaseModel):
    BucketName: Optional[S3BucketName] = None
    ObjectKey: Optional[S3ObjectKey] = None


class DataSourceS3Configuration(BaseModel):
    BucketName: S3BucketName
    ObjectKeyPrefix: Optional[S3ObjectKey] = None


class Database(BaseModel):
    Arn: Optional[String] = None
    CreationTime: Optional[Date] = None
    DatabaseName: Optional[ResourceName] = None
    KmsKeyId: Optional[StringValue2048] = None
    LastUpdatedTime: Optional[Date] = None
    TableCount: Optional[Long] = None


class DatabaseList(RootModel[List[Database]]):
    root: List[Database]


class DeleteDatabaseRequest(BaseModel):
    DatabaseName: ResourceName


class DeleteTableRequest(BaseModel):
    DatabaseName: ResourceName
    TableName: ResourceName


class DescribeDatabaseRequest(BaseModel):
    DatabaseName: ResourceName


class DescribeDatabaseResponse(BaseModel):
    Database_1: Optional[Database] = Field(None, alias='Database')


class DescribeTableRequest(BaseModel):
    DatabaseName: ResourceName
    TableName: ResourceName


class Dimension(BaseModel):
    DimensionValueType_1: Optional[DimensionValueType] = Field(
        None, alias='DimensionValueType'
    )
    Name: SchemaName
    Value: SchemaValue


class DimensionMapping(BaseModel):
    DestinationColumn: Optional[SchemaName] = None
    SourceColumn: Optional[SchemaName] = None


class DimensionMappings(RootModel[List[DimensionMapping]]):
    root: List[DimensionMapping] = Field(..., min_length=1)


class Dimensions(RootModel[List[Dimension]]):
    root: List[Dimension] = Field(..., max_length=128)


class Endpoint(BaseModel):
    Address: String
    CachePeriodInMinutes: Long


class Endpoints(RootModel[List[Endpoint]]):
    root: List[Endpoint]


class ListBatchLoadTasksRequest(BaseModel):
    MaxResults: Optional[PageLimit] = None
    NextToken: Optional[String] = None
    TaskStatus: Optional[BatchLoadStatus] = None


class ListBatchLoadTasksResponse(BaseModel):
    BatchLoadTasks: Optional[BatchLoadTaskList] = None
    NextToken: Optional[String] = None


class ListDatabasesRequest(BaseModel):
    MaxResults: Optional[PaginationLimit] = None
    NextToken: Optional[String] = None


class ListDatabasesResponse(BaseModel):
    Databases: Optional[DatabaseList] = None
    NextToken: Optional[String] = None


class ListTablesRequest(BaseModel):
    DatabaseName: Optional[ResourceName] = None
    MaxResults: Optional[PaginationLimit] = None
    NextToken: Optional[String] = None


class MeasureValue(BaseModel):
    Name: SchemaName
    Type: MeasureValueType
    Value: StringValue2048


class MeasureValues(RootModel[List[MeasureValue]]):
    root: List[MeasureValue]


class MultiMeasureAttributeMapping(BaseModel):
    MeasureValueType: Optional[ScalarMeasureValueType] = None
    SourceColumn: SchemaName
    TargetMultiMeasureAttributeName: Optional[SchemaName] = None


class MultiMeasureAttributeMappingList(RootModel[List[MultiMeasureAttributeMapping]]):
    root: List[MultiMeasureAttributeMapping] = Field(..., min_length=1)


class MultiMeasureMappings(BaseModel):
    MultiMeasureAttributeMappings: MultiMeasureAttributeMappingList
    TargetMultiMeasureName: Optional[SchemaName] = None


class Record(BaseModel):
    Dimensions_1: Optional[Dimensions] = Field(None, alias='Dimensions')
    MeasureName: Optional[SchemaName] = None
    MeasureValue: Optional[StringValue2048] = None
    MeasureValueType_1: Optional[MeasureValueType] = Field(
        None, alias='MeasureValueType'
    )
    MeasureValues_1: Optional[MeasureValues] = Field(None, alias='MeasureValues')
    Time: Optional[StringValue256] = None
    TimeUnit_1: Optional[TimeUnit] = Field(None, alias='TimeUnit')
    Version: Optional[RecordVersion] = None


class Records(RootModel[List[Record]]):
    root: List[Record] = Field(..., max_length=100, min_length=1)


class ReportS3Configuration(BaseModel):
    BucketName: S3BucketName
    EncryptionOption: Optional[S3EncryptionOption] = None
    KmsKeyId: Optional[StringValue2048] = None
    ObjectKeyPrefix: Optional[S3ObjectKeyPrefix] = None


class S3Configuration(BaseModel):
    BucketName: Optional[S3BucketName] = None
    EncryptionOption: Optional[S3EncryptionOption] = None
    KmsKeyId: Optional[StringValue2048] = None
    ObjectKeyPrefix: Optional[S3ObjectKeyPrefix] = None


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    Tags: TagList


class UpdateDatabaseResponse(BaseModel):
    Database_1: Optional[Database] = Field(None, alias='Database')


class WriteRecordsRequest(BaseModel):
    CommonAttributes: Optional[Record] = None
    DatabaseName: ResourceName
    Records_1: Records = Field(..., alias='Records')
    TableName: ResourceName


class CreateDatabaseRequest(BaseModel):
    DatabaseName: ResourceCreateAPIName
    KmsKeyId: Optional[StringValue2048] = None
    Tags: Optional[TagList] = None


class CreateDatabaseResponse(BaseModel):
    Database_1: Optional[Database] = Field(None, alias='Database')


class DataSourceConfiguration(BaseModel):
    CsvConfiguration_1: Optional[CsvConfiguration] = Field(
        None, alias='CsvConfiguration'
    )
    DataFormat: BatchLoadDataFormat
    DataSourceS3Configuration_1: DataSourceS3Configuration = Field(
        ..., alias='DataSourceS3Configuration'
    )


class DescribeEndpointsResponse(BaseModel):
    Endpoints_1: Endpoints = Field(..., alias='Endpoints')


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class MagneticStoreRejectedDataLocation(BaseModel):
    S3Configuration_1: Optional[S3Configuration] = Field(None, alias='S3Configuration')


class MagneticStoreWriteProperties(BaseModel):
    EnableMagneticStoreWrites: Boolean
    MagneticStoreRejectedDataLocation_1: Optional[MagneticStoreRejectedDataLocation] = (
        Field(None, alias='MagneticStoreRejectedDataLocation')
    )


class MixedMeasureMapping(BaseModel):
    MeasureName: Optional[SchemaName] = None
    MeasureValueType_1: MeasureValueType = Field(..., alias='MeasureValueType')
    MultiMeasureAttributeMappings: Optional[MultiMeasureAttributeMappingList] = None
    SourceColumn: Optional[SchemaName] = None
    TargetMeasureName: Optional[SchemaName] = None


class MixedMeasureMappingList(RootModel[List[MixedMeasureMapping]]):
    root: List[MixedMeasureMapping] = Field(..., min_length=1)


class ReportConfiguration(BaseModel):
    ReportS3Configuration_1: Optional[ReportS3Configuration] = Field(
        None, alias='ReportS3Configuration'
    )


class Table(BaseModel):
    Arn: Optional[String] = None
    CreationTime: Optional[Date] = None
    DatabaseName: Optional[ResourceName] = None
    LastUpdatedTime: Optional[Date] = None
    MagneticStoreWriteProperties_1: Optional[MagneticStoreWriteProperties] = Field(
        None, alias='MagneticStoreWriteProperties'
    )
    RetentionProperties_1: Optional[RetentionProperties] = Field(
        None, alias='RetentionProperties'
    )
    TableName: Optional[ResourceName] = None
    TableStatus_1: Optional[TableStatus] = Field(None, alias='TableStatus')


class TableList(RootModel[List[Table]]):
    root: List[Table]


class UpdateTableRequest(BaseModel):
    DatabaseName: ResourceName
    MagneticStoreWriteProperties_1: Optional[MagneticStoreWriteProperties] = Field(
        None, alias='MagneticStoreWriteProperties'
    )
    RetentionProperties_1: Optional[RetentionProperties] = Field(
        None, alias='RetentionProperties'
    )
    TableName: ResourceName


class UpdateTableResponse(BaseModel):
    Table_1: Optional[Table] = Field(None, alias='Table')


class CreateTableRequest(BaseModel):
    DatabaseName: ResourceCreateAPIName
    MagneticStoreWriteProperties_1: Optional[MagneticStoreWriteProperties] = Field(
        None, alias='MagneticStoreWriteProperties'
    )
    RetentionProperties_1: Optional[RetentionProperties] = Field(
        None, alias='RetentionProperties'
    )
    TableName: ResourceCreateAPIName
    Tags: Optional[TagList] = None


class CreateTableResponse(BaseModel):
    Table_1: Optional[Table] = Field(None, alias='Table')


class DataModel(BaseModel):
    DimensionMappings_1: DimensionMappings = Field(..., alias='DimensionMappings')
    MeasureNameColumn: Optional[StringValue256] = None
    MixedMeasureMappings: Optional[MixedMeasureMappingList] = None
    MultiMeasureMappings_1: Optional[MultiMeasureMappings] = Field(
        None, alias='MultiMeasureMappings'
    )
    TimeColumn: Optional[StringValue256] = None
    TimeUnit_1: Optional[TimeUnit] = Field(None, alias='TimeUnit')


class DataModelConfiguration(BaseModel):
    DataModel_1: Optional[DataModel] = Field(None, alias='DataModel')
    DataModelS3Configuration_1: Optional[DataModelS3Configuration] = Field(
        None, alias='DataModelS3Configuration'
    )


class DescribeTableResponse(BaseModel):
    Table_1: Optional[Table] = Field(None, alias='Table')


class ListTablesResponse(BaseModel):
    NextToken: Optional[String] = None
    Tables: Optional[TableList] = None


class BatchLoadTaskDescription(BaseModel):
    CreationTime: Optional[Date] = None
    DataModelConfiguration_1: Optional[DataModelConfiguration] = Field(
        None, alias='DataModelConfiguration'
    )
    DataSourceConfiguration_1: Optional[DataSourceConfiguration] = Field(
        None, alias='DataSourceConfiguration'
    )
    ErrorMessage: Optional[StringValue2048] = None
    LastUpdatedTime: Optional[Date] = None
    ProgressReport: Optional[BatchLoadProgressReport] = None
    RecordVersion_1: Optional[RecordVersion] = Field(None, alias='RecordVersion')
    ReportConfiguration_1: Optional[ReportConfiguration] = Field(
        None, alias='ReportConfiguration'
    )
    ResumableUntil: Optional[Date] = None
    TargetDatabaseName: Optional[ResourceName] = None
    TargetTableName: Optional[ResourceName] = None
    TaskId: Optional[BatchLoadTaskId] = None
    TaskStatus: Optional[BatchLoadStatus] = None


class CreateBatchLoadTaskRequest(BaseModel):
    ClientToken: Optional[ClientRequestToken] = None
    DataModelConfiguration_1: Optional[DataModelConfiguration] = Field(
        None, alias='DataModelConfiguration'
    )
    DataSourceConfiguration_1: DataSourceConfiguration = Field(
        ..., alias='DataSourceConfiguration'
    )
    RecordVersion_1: Optional[RecordVersion] = Field(None, alias='RecordVersion')
    ReportConfiguration_1: ReportConfiguration = Field(..., alias='ReportConfiguration')
    TargetDatabaseName: ResourceCreateAPIName
    TargetTableName: ResourceCreateAPIName


class DescribeBatchLoadTaskResponse(BaseModel):
    BatchLoadTaskDescription_1: BatchLoadTaskDescription = Field(
        ..., alias='BatchLoadTaskDescription'
    )
